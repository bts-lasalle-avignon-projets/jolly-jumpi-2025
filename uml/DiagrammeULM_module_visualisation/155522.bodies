class IHMStatistiquesJoueur
!!!167682.cpp!!!	editerLabelEntete(in numero : QString, in indexLabelEntete : int) : void
    QString valeur;
    if(indexLabelEntete == JOUEUR)
        valeur = numero;
    else if(indexLabelEntete == SCORE)
        valeur = QString::number(gestionPartie->recupererScoreJoueur(numero));
    else if(indexLabelEntete == PLACE)
        valeur = QString::number(gestionPartie->recupererPlaceJoueur(numero));
    else
    {
        qDebug() << Q_FUNC_INFO << "indexLabelEntete invalide"
                 << indexLabelEntete;
        return;
    }

    editerLabel(nomLabelsEntete[indexLabelEntete],
                nomLabelsEntete[indexLabelEntete] + " " + valeur);
!!!167810.cpp!!!	editerLabel(in labelRecherche : QString, in valeur : QString) : void
    QString nomLabel = "label" + labelRecherche;
    QLabel* label    = this->findChild<QLabel*>(nomLabel);

    if(label)
    {
        label->setText(valeur);
    }
    else
        qDebug() << Q_FUNC_INFO << "label" << nomLabel << "non trouvé";
!!!154626.cpp!!!	afficherStatistiques(in numero : QString) : void
    qDebug() << Q_FUNC_INFO << numero;
    std::vector<QList<QString> > statistiques =
      gestionPartie->recupererStatistiquesJoueur(numero);
    for(int indexLabelEntete = 0; indexLabelEntete < NB_LABELS_ENTETE;
        ++indexLabelEntete)
    {
        editerLabelEntete(numero, indexLabelEntete);
    }
    for(int ligne = 0; ligne < gestionPartie->recupererScoreMax(); ++ligne)
    {
        QString numeroLigne = QString::number(ligne + 1);

        for(int indexLabel = 0; indexLabel < NB_LABELS; ++indexLabel)
        {
            if(ligne < statistiques.size())
            {
                QList<QString> elementsStatistiques = statistiques[ligne];
                editerLabel(nomLabels[indexLabel] + numeroLigne,
                            elementsStatistiques[indexLabel]);
            }
            else
                editerLabel(nomLabels[indexLabel] + numeroLigne, "");
            // vide les tirs fantomes
        }
    }
!!!154754.cpp!!!	deroulerStatistiques() : void
    qDebug() << Q_FUNC_INFO;
    indexJoueurStatistiques = 0;
    deroulerStatistiquesSuivant();
!!!167938.cpp!!!	appliquerMiseEnForme(inout layout : QLayout, in taillePolice : int) : void
    for(int i = 0; i < layout->count(); ++i)
    {
        QLayoutItem* item = layout->itemAt(i);

        if(QWidget* widget = item->widget())
        {
            if(QLabel* label = qobject_cast<QLabel*>(widget))
            {
                QFont police = label->font();
                police.setPointSize(taillePolice);
                label->setFont(police);
            }
        }
        else if(QLayout* sousLayout = item->layout())
        {
            // Appel récursif pour gérer les layouts imbriqués
            appliquerMiseEnForme(sousLayout, taillePolice);
        }
    }
!!!168066.cpp!!!	redimensionnerLabel() : void
    qDebug() << Q_FUNC_INFO;
    // int          tailleTitre = 30;
    int          tailleTexte = 20;
    QVBoxLayout* vLayoutTableauStatistiques =
      findChild<QVBoxLayout*>("vLayoutTableauStatistiques");

    if(vLayoutTableauStatistiques)
    {
        qDebug() << Q_FUNC_INFO << "Trouvé" << vLayoutTableauStatistiques;
        appliquerMiseEnForme(vLayoutTableauStatistiques, tailleTexte);
    }
!!!155010.cpp!!!	simulerStatistiquesJoueur() : void
    // Touche Q -> fermer
    QAction* quitter = new QAction(this);
    quitter->setShortcut(QKeySequence(QKeySequence(Qt::Key_Q)));
    addAction(quitter);
    connect(quitter, SIGNAL(triggered()), this, SLOT(fermer()));
!!!155138.cpp!!!	showEvent(inout event : QShowEvent) : void
    qDebug() << Q_FUNC_INFO << this;
    redimensionnerLabel();
    deroulerStatistiques();
!!!155266.cpp!!!	IHMStatistiquesJoueur(inout gestionPartie : GestionPartie, inout parent : QWidget = nullptr)
    uiStatistiquesJoueur->setupUi(this);

    setWindowTitle(QString(""));

    qDebug() << Q_FUNC_INFO << this << "gestionPartie" << gestionPartie;
    nomLabelsEntete << "Joueur" // JOUEUR
                    << "Score"  // SCORE
                    << "Place"; // PLACE

    nomLabels << "L"      // NUMERO_TIR
              << "P"      // SCORE_TIR
              << "S"      // SCORE_CUMULE
              << "T"      // TEMPS_TIR
              << "E"      // ECART_TIR
              << "TPref"; // TROU_PREFERE

#ifdef RPI
    showFullScreen();
#else
    showMaximized();
#endif
#ifdef SIMULATION_CLAVIER_STATISTIQUESJOUEUR
    simulerStatistiquesJoueur();
#endif
    connect(gestionPartie,
            &GestionPartie::estFinPartie,
            this,
            &IHMStatistiquesJoueur::fermer);
!!!155394.cpp!!!	~IHMStatistiquesJoueur()
    delete uiStatistiquesJoueur;
    qDebug() << Q_FUNC_INFO << this << "gestionPartie" << gestionPartie;
!!!155522.cpp!!!	fermer() : void
    qDebug() << Q_FUNC_INFO << this;
    this->close();
!!!155650.cpp!!!	deroulerStatistiquesSuivant() : void
    qDebug() << Q_FUNC_INFO;
    QString numero = QString::number(indexJoueurStatistiques + 1);
    afficherStatistiques(numero);

    indexJoueurStatistiques++;
    if(indexJoueurStatistiques < gestionPartie->recupererNombreJoueurs())
    {
        QTimer::singleShot(gestionPartie->recupererTempsAffichageFenetre() *
                             1000,
                           this,
                           SLOT(deroulerStatistiquesSuivant()));
    }
    else
    {
        qDebug() << Q_FUNC_INFO << "plus de joueur";
    }
