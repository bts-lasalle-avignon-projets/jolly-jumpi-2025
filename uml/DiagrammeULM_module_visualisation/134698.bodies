class Communication
!!!135210.cpp!!!	Communication(inout parent : QObject = nullptr)
    qDebug() << Q_FUNC_INFO << this;

    typesMessages << "PC" // CONFIGURATION_PARTIE
                  << "C"  // CONFIGURATION_PISTE
                  << "PD" // DEMARRER_PARTIE (ORDRE)
                  << "PF" // FINIR_PARTIE (ORDRE)
                  << "D"  // DEBUT_PARTIE (SIGNAL)
                  << "F"  // FIN_PARTIE (SIGNAL)
                  << "S0" // PAGE_ACCUEIL
                  << "S1" // PAGE_HISTORIQUE
                  << "A"  // ASSOCIATION
                  << "T"; // TIR
    communiquerModulesConnectes();
    connect(bluetooth,
            &Bluetooth::messageRecu,
            this,
            &Communication::traiterMessage);
!!!135338.cpp!!!	~Communication()
    delete bluetooth;
    qDebug() << Q_FUNC_INFO << this;
!!!144002.cpp!!!	construireMessage(in message : QString) : QString
    return DEBUT_MESSAGE + message + FIN_MESSAGE;
!!!144130.cpp!!!	envoyerMessage(in destinataire : QString, in message : QString) : void
    qDebug() << Q_FUNC_INFO << "destinataire" << destinataire << "message"
             << message;
    bluetooth->envoyerMessage(destinataire, construireMessage(message));
!!!144258.cpp!!!	envoyerMessageGroupe(in message : QString) : void
    qDebug() << Q_FUNC_INFO << "message" << message;
    bluetooth->envoyerMessageGroupe(construireMessage(message));
!!!144386.cpp!!!	demanderConfirmationAssociation() : void
    qDebug() << Q_FUNC_INFO;
    envoyerMessage(bluetooth->recupererAdresseModuleDetectionBalles(),
                   typesMessages.at(Communication::TypeMessage::ASSOCIATION));
!!!135850.cpp!!!	confirmerAssociation(in retourAssociation : QString) : void
    qDebug() << Q_FUNC_INFO << "retourAssociation" << retourAssociation;
    // Signale les pistes au module de configuration
    envoyerMessage(bluetooth->recupererAdresseModuleConfiguration(),
                   typesMessages.at(Communication::TypeMessage::ASSOCIATION) +
                     retourAssociation);
!!!144514.cpp!!!	envoyerConfiguration(in modeDeJeu : int, in nombreJoueur : int) : void
    QString configuration =
      typesMessages.at(Communication::TypeMessage::CONFIGURATION_PISTE) +
      QString::number(modeDeJeu) + ";" + QString::number(nombreJoueur);

    qDebug() << Q_FUNC_INFO << "modeDeJeu" << modeDeJeu << "nombre joueur"
             << nombreJoueur << "message" << configuration;
    envoyerMessage(bluetooth->recupererAdresseModuleDetectionBalles(),
                   configuration);
!!!136106.cpp!!!	envoyerDebutDePartie() : void
    qDebug() << Q_FUNC_INFO;
    envoyerMessageGroupe(
      typesMessages.at(Communication::TypeMessage::DEBUT_PARTIE));
!!!165250.cpp!!!	arreterPartie() : void
    qDebug() << Q_FUNC_INFO;
    envoyerMessage(bluetooth->recupererAdresseModuleDetectionBalles(),
                   typesMessages.at(Communication::TypeMessage::FIN_PARTIE));
!!!136234.cpp!!!	signalerFinDePartie() : void
    qDebug() << Q_FUNC_INFO;
    envoyerMessage(bluetooth->recupererAdresseModuleConfiguration(),
                   typesMessages.at(Communication::TypeMessage::FIN_PARTIE));
!!!144642.cpp!!!	communiquerConfiguration(in informations : QString) : void
    QString nombreJoueursRecu;
    QString modeDeJeuRecu;

    nombreJoueursRecu = extraireElement(informations, NOMBRE_JOUEUR);
    modeDeJeuRecu     = extraireElement(informations, MODE_DE_JEU);

    qDebug() << Q_FUNC_INFO << "informations" << informations
             << "nombreJoueursRecu" << nombreJoueursRecu << "modeDeJeuRecu"
             << modeDeJeuRecu;
    emit configurationRecue(nombreJoueursRecu, modeDeJeuRecu);
!!!144770.cpp!!!	gererAssociation(in message : QString) : void
    qDebug() << Q_FUNC_INFO << message;

    if(!message.isEmpty())
    {
        qDebug() << Q_FUNC_INFO << "message" << message;
        confirmerAssociation(message);
        // Génère les numéros de piste
        QString nombrePistes = message.at(NOMBRE_PISTES);
        qDebug() << Q_FUNC_INFO << "nombrePistes" << nombrePistes;
        for(int n = 1; n <= nombrePistes.toInt(); ++n)
            pistes.append(QString::number(n));
    }
!!!144898.cpp!!!	gererChangementPage() : void
    qDebug() << Q_FUNC_INFO;
!!!145026.cpp!!!	nettoyerMessage(in message : QString, in caracteres : QString) : QString
    QString messageCopie = message;
    return messageCopie.remove(caracteres);
!!!145154.cpp!!!	extraireElement(in informations : QString, in element : int) : QString
    QStringList messageDecompose = informations.split(";");
    return messageDecompose[element];
!!!145282.cpp!!!	communiquerTirJoueur(in informations : QString) : void
    qDebug() << Q_FUNC_INFO << informations;
    QString numeroPiste;
    QString scoreTir;

    numeroPiste = extraireElement(informations, NUMERO_PISTE);
    scoreTir    = extraireElement(informations, SCORE_TIR);

    qDebug() << Q_FUNC_INFO << "numeroPiste" << numeroPiste << "scoreTir"
             << scoreTir;
    emit scoreRecu(numeroPiste, scoreTir);
!!!145410.cpp!!!	recupererPistes() : QList<QString>
    qDebug() << Q_FUNC_INFO << "pistes" << pistes;
    return pistes;
!!!145538.cpp!!!	effacerPistes() : void
    pistes.clear();
!!!145666.cpp!!!	simulerModuleConfiguration() : void
    qDebug() << Q_FUNC_INFO;
    QTimer::singleShot(
      10000,
      this,
      [this]()
      {
          traiterMessage("jp-config-1", "00:00:00:00:00:00", "C0;2");
          QTimer::singleShot(
            5000,
            this,
            [this]()
            {
                traiterMessage("jp-config-1", "00:00:00:00:00:00", "D");
#ifdef SIMULATION_MODULE_CONFIGURATION_ABANDON
                QTimer::singleShot(
                  5000,
                  this,
                  [this]()
                  {
                      traiterMessage("jp-config-1", "00:00:00:00:00:00", "F");
                      QTimer::singleShot(5000,
                                         this,
                                         [this]()
                                         {
                                             traiterMessage("jp-config-1",
                                                            "00:00:00:00:00:00",
                                                            "C0;2");
                                             QTimer::singleShot(
                                               5000,
                                               this,
                                               [this]()
                                               {
                                                   traiterMessage(
                                                     "jp-config-1",
                                                     "00:00:00:00:00:00",
                                                     "D");
                                               });
                                         });
                  });
#endif
            });
      });
!!!145794.cpp!!!	traiterMessage(in nom : QString, in adresse : QString, in messageRecu : QString) : void
    Communication::TypeMessage typeMessage =
      Communication::TypeMessage::INCONNU;

    if(!estMessageValide(messageRecu))
        return;
    QString message = nettoyerSeparateursMessage(messageRecu);
    typeMessage     = identifierTypeMessage(message);
    qDebug() << Q_FUNC_INFO << "nom" << nom << "adresse" << adresse << "message"
             << messageRecu << "typeMessage" << typeMessage;
    QString informations = nettoyerMessage(message, typesMessages[typeMessage]);
    switch(typeMessage)
    {
        case Communication::TypeMessage::CONFIGURATION_PARTIE:
            emit configurationEnCours();
            communiquerConfiguration(informations);
            demanderConfirmationAssociation();
            break;
        case Communication::TypeMessage::DEMARRER_PARTIE:
            emit partieDemarree();
            break;
        case Communication::TypeMessage::FINIR_PARTIE:
            emit abandonPartie();
            break;
        case Communication::TypeMessage::PAGE_ACCUEIL:
        case Communication::TypeMessage::PAGE_HISTORIQUE:
            gererChangementPage();
            break;
        case Communication::TypeMessage::ASSOCIATION:
            gererAssociation(informations);
            break;
        case Communication::TypeMessage::TIR:
            communiquerTirJoueur(informations);
            break;
        default:
            qDebug() << Q_FUNC_INFO << "typeMessage inconnu !";
    }
!!!165378.cpp!!!	estMessageValide(in message : QString) : bool
    if(message.startsWith(DEBUT_MESSAGE) && message.endsWith(FIN_MESSAGE))
    {
        qDebug() << Q_FUNC_INFO << "true";
        return true;
    }
    qDebug() << Q_FUNC_INFO << "false" << message;
    return false;
!!!165506.cpp!!!	nettoyerSeparateursMessage(inout message : QString) : QString
    message.remove(DEBUT_MESSAGE);
    message.remove(FIN_MESSAGE);
    return message;
!!!145922.cpp!!!	identifierTypeMessage(in message : QString) : Communication::TypeMessage
    for(int i = 0; i < typesMessages.size(); ++i)
    {
        if(verifierTypeMessage(message, typesMessages.at(i)))
            return Communication::TypeMessage(i);
    }
    return Communication::TypeMessage::INCONNU;
!!!146050.cpp!!!	verifierTypeMessage(in message : QString, in type : QString) : bool
    if(message.startsWith(type))
    {
        return true;
    }
    return false;
!!!136490.cpp!!!	estDemandePageAccueil(in message : QString) : bool
    return false;
!!!136618.cpp!!!	estDemandePageHistorique(in message : QString) : bool
    return false;
!!!175362.cpp!!!	communiquerModulesConnectes() : void
    QTimer* minuteur = new QTimer(this);
    connect(minuteur,
            &QTimer::timeout,
            this,
            [this, minuteur]()
            {
                if(bluetooth->getNbConnectes() == NOMBRE_MODULE)
                {
                    minuteur->stop();
                    emit modulesConnectes();
                    return;
                }
            });

    minuteur->start(5000); // toutes les 1 secondes
!!!146818.cpp!!!	configurationRecue(in _t1 : QString, in _t2 : QString) : void
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(&_t1)), const_cast<void*>(reinterpret_cast<const void*>(&_t2)) };
    QMetaObject::activate(this, &staticMetaObject, 1, _a);
!!!146946.cpp!!!	scoreRecu(in _t1 : QString, in _t2 : QString) : void
    void *_a[] = { nullptr, const_cast<void*>(reinterpret_cast<const void*>(&_t1)), const_cast<void*>(reinterpret_cast<const void*>(&_t2)) };
    QMetaObject::activate(this, &staticMetaObject, 2, _a);
!!!147074.cpp!!!	partieDemarree() : void
    QMetaObject::activate(this, &staticMetaObject, 3, nullptr);
!!!147202.cpp!!!	estEnAttenteDeConfiguration() : void
    QMetaObject::activate(this, &staticMetaObject, 4, nullptr);
!!!147330.cpp!!!	abandonPartie() : void
    QMetaObject::activate(this, &staticMetaObject, 5, nullptr);
