class IHMClassement
!!!150914.cpp!!!	editerLabelChrono() : void
    uiClassement->labelTemps->setText(
      gestionPartie->convertirTemps(gestionPartie->recupererChronometre()));
!!!151042.cpp!!!	editerLabelPremierJoueurNomJoueur(in numeroJoueur : QString) : void
    uiClassement->labelPJJoueur->setText("Joueur " + numeroJoueur);
!!!151170.cpp!!!	editerLabelPremierJoueurScore(in score : QString) : void
    uiClassement->labelPJScore->setText("Score: " + score);
!!!166402.cpp!!!	editerLabel(in labelRecherche : QString, in valeur : QString) : void
    QString nomLabel = "label" + labelRecherche;
    QLabel* label    = this->findChild<QLabel*>(nomLabel);

    if(label)
    {
        label->setText(valeur);
    }
    else
        qDebug() << Q_FUNC_INFO << "label" << nomLabel << "non trouvé";
!!!151682.cpp!!!	afficherClassement() : void
    qDebug() << Q_FUNC_INFO;
    std::vector<QList<QString> > classement;
    classement = gestionPartie->genererClassement();
    editerLabelChrono();

    for(int i = 0; i < NOMBRE_JOUEUR_MAX; ++i)
    {
        QString               numeroLigne = QString::number(i + 1);
        const QList<QString>& ligne       = classement[i];
        if(i == 0)
        {
            editerLabelPremierJoueurNomJoueur(ligne[JOUEUR]);
            editerLabelPremierJoueurScore(ligne[SCORE]);
        }
        for(int indexLabel = 0; indexLabel < NB_LABELS; ++indexLabel)
        {
            if(i < gestionPartie->recupererNombreJoueurs())
                editerLabel(nomLabels[indexLabel] + numeroLigne,
                            ligne[indexLabel]);
            else
                editerLabel(nomLabels[indexLabel] + numeroLigne, "");
            // vide les joueurs fantomes
        }
    }
!!!166530.cpp!!!	redimensionnerLabel() : void
    int          tailleTitre = 30;
    int          tailleTexte = 20;
    QHBoxLayout* hLayoutPJ   = findChild<QHBoxLayout*>("hLayoutPJ");
    QVBoxLayout* vLayoutTableauClassement =
      findChild<QVBoxLayout*>("vLayoutTableauClassement");
    if(hLayoutPJ)
    {
        qDebug() << Q_FUNC_INFO << "Trouvé" << hLayoutPJ;
        appliquerMiseEnForme(hLayoutPJ, tailleTitre);
    }

    if(vLayoutTableauClassement)
    {
        qDebug() << Q_FUNC_INFO << "Trouvé" << vLayoutTableauClassement;
        appliquerMiseEnForme(vLayoutTableauClassement, tailleTexte);
    }
!!!166658.cpp!!!	appliquerMiseEnForme(inout layout : QLayout, in taillePolice : int) : void
    for(int i = 0; i < layout->count(); ++i)
    {
        QLayoutItem* item = layout->itemAt(i);

        if(QWidget* widget = item->widget())
        {
            if(QLabel* label = qobject_cast<QLabel*>(widget))
            {
                QFont police = label->font();
                police.setPointSize(taillePolice);
                label->setFont(police);
            }
        }
        else if(QLayout* sousLayout = item->layout())
        {
            // Appel récursif pour gérer les layouts imbriqués
            appliquerMiseEnForme(sousLayout, taillePolice);
        }
    }
!!!151810.cpp!!!	simulerClassement() : void
    // Touche Q -> fermer
    QAction* quitter = new QAction(this);
    quitter->setShortcut(QKeySequence(QKeySequence(Qt::Key_Q)));
    addAction(quitter);
    connect(quitter, SIGNAL(triggered()), this, SLOT(fermer()));
!!!151938.cpp!!!	showEvent(inout event : QShowEvent) : void
    qDebug() << Q_FUNC_INFO << this;
    redimensionnerLabel();
    afficherClassement();
!!!152066.cpp!!!	IHMClassement(inout gestionPartie : GestionPartie, inout parent : QWidget = nullptr)
    uiClassement->setupUi(this);

    setWindowTitle(QString(""));

    qDebug() << Q_FUNC_INFO << this << "gestionPartie" << gestionPartie;

    nomLabels << "P"  // PLACE
              << "J"  // JOUEUR
              << "S"; // SCORE

#ifdef RPI
    showFullScreen();
#else
    showMaximized();
#endif
#ifdef SIMULATION_CLAVIER_CLASSEMENT
    simulerClassement();
#endif
    connect(gestionPartie,
            &GestionPartie::estFinPartie,
            this,
            &IHMClassement::fermer);
!!!152194.cpp!!!	~IHMClassement()
    delete uiClassement;
    qDebug() << Q_FUNC_INFO << this << "gestionPartie" << gestionPartie;
!!!152322.cpp!!!	fermer() : void
    qDebug() << Q_FUNC_INFO << this;
    this->close();
